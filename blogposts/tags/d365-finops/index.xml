<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>D365 FinOps on iamanirbanpaul</title>
    <link>https://IamAnirbanPaul.github.io/tags/d365-finops/</link>
    <description>Recent content in D365 FinOps on iamanirbanpaul</description>
    <generator>Hugo -- 0.147.9</generator>
    <language>en-us</language>
    <copyright>Anirban Paul 2025</copyright>
    <lastBuildDate>Fri, 11 Jul 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://IamAnirbanPaul.github.io/tags/d365-finops/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>🥡 How to Pack a Container Like a Bengali Mom Packs a Lunchbox</title>
      <link>https://IamAnirbanPaul.github.io/blogs/1-xppcontainerception/</link>
      <pubDate>Wed, 09 Jul 2025 00:00:00 +0000</pubDate>
      <guid>https://IamAnirbanPaul.github.io/blogs/1-xppcontainerception/</guid>
      <description>&lt;p&gt;🧊 &lt;strong&gt;Ever wanted to insert one container inside another in X++?&lt;/strong&gt;&lt;br&gt;
Whether you&amp;rsquo;re working with temporary in-memory structures or building payloads for integrations, this trick can help you dynamically group rows into containers — just like a 2D array!&lt;/p&gt;
&lt;p&gt;Let’s dive in. 💻&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;-the-problem&#34;&gt;🚀 The Problem&lt;/h2&gt;
&lt;p&gt;You want to loop through a dataset (like IDs and names), create a container for each row, and &lt;strong&gt;nest those containers into one master container&lt;/strong&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hold My Context While I CoC This 🍺🪄</title>
      <link>https://IamAnirbanPaul.github.io/blogs/2-disposablecontext/</link>
      <pubDate>Thu, 10 Jul 2025 00:00:00 +0000</pubDate>
      <guid>https://IamAnirbanPaul.github.io/blogs/2-disposablecontext/</guid>
      <description>Need to pass data downstream in your X&#43;&#43; CoC or framework call without polluting method signatures? Enter Disposable Contexts — your elegant and type-safe solution!</description>
    </item>
    <item>
      <title>🔌 SysExtension Framework in D365FO: How I Learned to Stop Worrying and Love the Factory</title>
      <link>https://IamAnirbanPaul.github.io/blogs/3-sysextensionfactoryfun/</link>
      <pubDate>Fri, 11 Jul 2025 00:00:00 +0000</pubDate>
      <guid>https://IamAnirbanPaul.github.io/blogs/3-sysextensionfactoryfun/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;“The best code is the one that doesn’t know too much.” — A wise developer (probably debugging a massive &lt;code&gt;switch-case&lt;/code&gt; block)&lt;/p&gt;&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&#34;-intro-the-anti-switch-revolution-begins&#34;&gt;🐱‍🏍 Intro: The Anti-Switch Revolution Begins&lt;/h2&gt;
&lt;p&gt;Do you wake up in cold sweat remembering a 100-line &lt;code&gt;switch&lt;/code&gt; statement in your factory method?&lt;br&gt;
Does adding a new subclass feel like open-heart surgery on a base class you don’t even own?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Welcome to the land of &lt;code&gt;SysExtension&lt;/code&gt;&lt;/strong&gt; — where your factories are clean, your base classes are blissfully ignorant, and your subclasses just… show up when needed. 🪄&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
